/*
 *    The contents of this file are subject to the Initial
 *    Developer's Public License Version 1.0 (the "License");
 *    you may not use this file except in compliance with the
 *    License. You may obtain a copy of the License at
 *    https://github.com/FirebirdSQL/NETProvider/blob/master/license.txt.
 *
 *    Software distributed under the License is distributed on
 *    an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
 *    express or implied. See the License for the specific
 *    language governing rights and limitations under the License.
 *
 *    All Rights Reserved.
 */

//$Authors = Jiri Cincura (jiri@cincura.net), Jean Ressouche, Rafael Almeida (ralms@ralms.net)

using System;
using System.Linq;
using FirebirdSql.EntityFrameworkCore.Firebird.Infrastructure.Internal;
using FirebirdSql.EntityFrameworkCore.Firebird.Metadata;
using FirebirdSql.EntityFrameworkCore.Firebird.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Migrations.Operations;
using Microsoft.EntityFrameworkCore.Storage;

namespace FirebirdSql.EntityFrameworkCore.Firebird.Migrations
{
	public class FbMigrationsSqlGenerator : MigrationsSqlGenerator
	{
		readonly IFbMigrationSqlGeneratorBehavior _behavior; 
		readonly IFbOptions _options;

		public FbMigrationsSqlGenerator(MigrationsSqlGeneratorDependencies dependencies, IFbMigrationSqlGeneratorBehavior behavior, IFbOptions options)
			: base(dependencies)
		{
			_behavior = behavior;
			_options = options;
		}

		protected override void Generate(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate)
		{
			base.Generate(operation, model, builder, false);
			if (terminate)
			{
				builder.Append(Dependencies.SqlGenerationHelper.StatementTerminator);
				EndStatement(builder);

				var columns = operation.Columns.Where(p => !p.IsNullable && string.IsNullOrWhiteSpace(p.DefaultValueSql) && p.DefaultValue == null);
				foreach (var column in columns)
				{
					var columnAnnotation = column.FindAnnotation(FbAnnotationNames.ValueGenerationStrategy);
					if (columnAnnotation != null)
					{
						var valueGenerationStrategy = columnAnnotation.Value as FbValueGenerationStrategy?;
						if (valueGenerationStrategy == FbValueGenerationStrategy.SequenceTrigger)
						{
							_behavior.CreateIdentityForColumn(column.Name, column.Table, builder);
						}
					}
				}
			}
		}

		protected override void ColumnDefinition(string schema, string table, string name, Type clrType, string type, bool? unicode, int? maxLength, bool rowVersion, bool nullable, object defaultValue, string defaultValueSql, string computedColumnSql, IAnnotatable annotatable, IModel model, MigrationCommandListBuilder builder)
		{
			builder.Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(name))
				.Append(" ")
				.Append(type ?? GetColumnType(schema, table, name, clrType, unicode, maxLength, rowVersion, model));

			if (!nullable)
			{
				var valueGenerationStrategy = annotatable[FbAnnotationNames.ValueGenerationStrategy] as FbValueGenerationStrategy?;
				switch (valueGenerationStrategy)
				{
					case FbValueGenerationStrategy.IdentityColumn:
						builder.Append(" GENERATED BY DEFAULT AS IDENTITY NOT NULL");
						break;
					case FbValueGenerationStrategy.None:
					case null:
						builder.Append(" NOT NULL");
						break;
				}
			}
			else
			{
				if (defaultValueSql != null)
				{
					builder.Append(" DEFAULT ")
						.Append(defaultValueSql);
				}
				else if (defaultValue != null)
				{
					var defaultValueLiteral = Dependencies.TypeMapper.GetMapping(clrType);
					builder.Append(" DEFAULT ")
						.Append(defaultValueLiteral.GenerateSqlLiteral(defaultValue));
				}

				if (!nullable)
				{
					builder.Append(" NOT NULL");
				}
			}
		}

		protected override void ForeignKeyAction(ReferentialAction referentialAction, MigrationCommandListBuilder builder)
		{
			switch (referentialAction)
			{
				case ReferentialAction.Restrict:
					builder.Append("NO ACTION");
					break;
				default:
					base.ForeignKeyAction(referentialAction, builder);
					break;
			}
		}
	}
}
