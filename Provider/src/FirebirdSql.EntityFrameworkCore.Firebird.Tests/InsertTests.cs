/*
 *    The contents of this file are subject to the Initial
 *    Developer's Public License Version 1.0 (the "License");
 *    you may not use this file except in compliance with the
 *    License. You may obtain a copy of the License at
 *    https://github.com/FirebirdSQL/NETProvider/blob/master/license.txt.
 *
 *    Software distributed under the License is distributed on
 *    an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
 *    express or implied. See the License for the specific
 *    language governing rights and limitations under the License.
 *
 *    All Rights Reserved.
 */

//$Authors = Jiri Cincura (jiri@cincura.net)

using System;
using FirebirdSql.EntityFrameworkCore.Firebird.Extensions;
using Microsoft.EntityFrameworkCore;
using NUnit.Framework;

namespace FirebirdSql.EntityFrameworkCore.Firebird.Tests
{
	public class InsertTests : EntityFrameworkCoreTestsBase
	{
		class InsertContext : FbTestDbContext
		{
			public InsertContext(string connectionString)
				: base(connectionString)
			{ }

			protected override void OnModelCreating(ModelBuilder modelBuilder)
			{
				base.OnModelCreating(modelBuilder);

				var insertEntityConf = modelBuilder.Entity<InsertEntity>();
				insertEntityConf.Property(x => x.Id).HasColumnName("ID");
				insertEntityConf.Property(x => x.Name).HasColumnName("NAME");
				insertEntityConf.ToTable("TEST_INSERT");
			}
		}
		class InsertEntity
		{
			public int Id { get; set; }
			public string Name { get; set; }
		}
		[Test]
		public void Insert()
		{
			using (var db = GetDbContext<InsertContext>())
			{
				db.Database.ExecuteSqlCommand("recreate table test_insert (id int primary key, name varchar(20))");
				var entity = new InsertEntity() { Id = -6, Name = "foobar" };
				db.Add(entity);
				db.SaveChanges();
				Assert.AreEqual(-6, entity.Id);
			}
		}

		class IdentityInsertContext : FbTestDbContext
		{
			public IdentityInsertContext(string connectionString)
				: base(connectionString)
			{ }

			protected override void OnModelCreating(ModelBuilder modelBuilder)
			{
				base.OnModelCreating(modelBuilder);

				var insertEntityConf = modelBuilder.Entity<IdentityInsertEntity>();
				insertEntityConf.Property(x => x.Id).HasColumnName("ID")
					.UseFirebirdIdentityColumn();
				insertEntityConf.Property(x => x.Name).HasColumnName("NAME");
				insertEntityConf.ToTable("TEST_INSERT_IDENTITY");
			}
		}
		class IdentityInsertEntity
		{
			public int Id { get; set; }
			public string Name { get; set; }
		}
		[Test]
		public void IdentityInsert()
		{
			if (!EnsureVersion(new Version("3.0.0.0")))
				return;

			using (var db = GetDbContext<IdentityInsertContext>())
			{
				db.Database.ExecuteSqlCommand("recreate table test_insert_identity (id int generated by default as identity (start with 26) primary key, name varchar(20))");
				var entity = new IdentityInsertEntity() { Name = "foobar" };
				db.Add(entity);
				db.SaveChanges();
				Assert.AreEqual(27, entity.Id);
			}
		}

		class SequenceInsertContext : FbTestDbContext
		{
			public SequenceInsertContext(string connectionString)
				: base(connectionString)
			{ }

			protected override void OnModelCreating(ModelBuilder modelBuilder)
			{
				base.OnModelCreating(modelBuilder);

				var insertEntityConf = modelBuilder.Entity<SequenceInsertEntity>();
				insertEntityConf.Property(x => x.Id).HasColumnName("ID")
					.UseFirebirdSequenceTrigger();
				insertEntityConf.Property(x => x.Name).HasColumnName("NAME");
				insertEntityConf.ToTable("TEST_INSERT_SEQUENCE");
			}
		}
		class SequenceInsertEntity
		{
			public int Id { get; set; }
			public string Name { get; set; }
		}
		[Test]
		public void SequenceInsert()
		{
			using (var db = GetDbContext<SequenceInsertContext>())
			{
				db.Database.ExecuteSqlCommand("recreate table test_insert_sequence (id int primary key, name varchar(20))");
				db.Database.ExecuteSqlCommand("recreate sequence seq_test_insert_sequence");
				db.Database.ExecuteSqlCommand("alter sequence seq_test_insert_sequence restart with 30");
				db.Database.ExecuteSqlCommand("recreate trigger test_insert_sequence_id before insert on test_insert_sequence as begin if (new.id is null) then begin new.id = next value for seq_test_insert_sequence; end end");
				var entity = new SequenceInsertEntity() { Name = "foobar" };
				db.Add(entity);
				db.SaveChanges();
				Assert.AreEqual(31, entity.Id);
			}
		}
	}
}
